Day 1 part 1

Assumptions about the input:
- it is a list of numbers 
  completely true since 2019;
  in 2018 the numbers had +/- in front of them;
  in 2017, it could be seen as a list of digits
- it is very simple to program, without gotchas
- It's always a fold (exception: 2020)
  it's always solvable in near linear time (although for 2020 that's not quite true and the simple solution is not linear time)



- it could be a list of pairs of numbers

(it could be more, or it could involve lists of varying lengths
   but I'm not sure how useful it would be to handle that)
- "sum the products of each line" is the most likely sort of thing


Gimmicks:
It's usually 'sum . map f' for some function 'f'
- 2021: process zip(l,l[1:]) (strictness of inequality didn't matter for my input)
- 2019: uses 'div'
- 2018: it's just a sum
- 2017: process zip(l,l[1:]+l[:1])
- 2015: a sum of a function of characters

this year:
 might be completely different - 2016 is map-based, 2020 is not best seen as a fold
 might involve 'mod'
 different things on alternate lines
 max*min?
 max(map f l) or min (map f l)
  (if there are multiple per line) sum(f(max(row)) for row in line) (or min in place of max)
 somthing involving maximumBy, minimumBy?
